// This is your Prisma schema file for testing,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/test-client"
}

datasource db {
  provider = "sqlite"
  url      = "file:./test.db"
}

model Player {
  id           Int           @id @default(autoincrement())
  mlbId        Int           @unique
  name         String
  position     String?
  team         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  PlayerStats  PlayerStats[]
  RosterSlot   RosterSlot[]

  @@map("players")
}

model PlayerStats {
  id       Int    @id @default(autoincrement())
  playerId Int
  season   Int
  stats    Json
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, season])
  @@map("player_stats")
}

model League {
  id         String   @id @default(cuid())
  name       String
  provider   String   // 'ESPN' or 'Yahoo'
  externalId String   @unique
  settings   Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  teams      Team[]

  @@map("leagues")
}

model Team {
  id         Int          @id @default(autoincrement())
  leagueId   String
  externalId Int
  name       String
  location   String?
  owner      String?
  league     League       @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  roster     RosterSlot[]

  @@unique([leagueId, externalId])
  @@map("teams")
}

model RosterSlot {
  id         Int     @id @default(autoincrement())
  teamId     Int
  playerId   Int?
  position   String
  status     String  // 'active', 'bench', 'ir', etc.
  team       Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  player     Player? @relation(fields: [playerId], references: [id])

  @@map("roster_slots")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  name        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  UserLeague  UserLeague[]

  @@map("users")
}

model UserLeague {
  id       String @id @default(cuid())
  userId   String
  leagueId String
  role     String // 'owner', 'member'
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, leagueId])
  @@map("user_leagues")
}